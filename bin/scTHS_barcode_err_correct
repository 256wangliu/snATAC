#!/usr/bin/env python

import sys
import collections
import os

def min_dist(s, sl):
    """ return the string with min edit distance """
    ss = sl[:]
    if len(s) == 0: sys.exit("error(min_dist): inquiry string has length 0")
    if len(ss) == 0: sys.exit("error(min_dist): inquiry string list has 0 elements")
    if ([len(s) == len(sj) for sj in ss].count(False) > 0): sys.exit("error(min_dist): different string length")
    dists = [[a == b for (a,b) in zip(s, sj)].count(False) for sj in ss]
    min_value = min(dists)
    min_index = dists.index(min(dists))
    min_s = ss[min_index]
        
    # find the 2nd min element in the list
    del dists[min_index]
    del ss[min_index]    

    min_value2 = min(dists)
    min_index2 = dists.index(min(dists))
    min_s2 = ss[min_index2]
    return (min_s, min_value, min_s2, min_value2)
  
def main():
    max_mm = int(sys.argv[1])
    dirt = sys.argv[2]
    
    """ main function """
    if os.path.isfile(dirt+'/i7_THS'): 
        table_i7 = [x.strip() for x in open(dirt+'/i7_THS').readlines()]
    else:
        sys.exit("error(main): i7_THS file not exists")

    if os.path.isfile(dirt+'/i5_THS'): 
        table_i5 = [x.strip() for x in open(dirt+'/i5_THS').readlines()]
    else:
        sys.exit("error(main): i5_THS file not exists")

    if os.path.isfile(dirt+'/r5_THS'): 
        table_r5 = [x.strip() for x in open(dirt+'/r5_THS').readlines()]
    else:
        sys.exit("error(main): r5_THS file not exists")
        
    if len(table_i7) == 0: sys.exit("error(main): i7 table has 0 elements")
    if len(table_r5) == 0: sys.exit("error(main): r5 table has 0 elements")
    if len(table_i5) == 0: sys.exit("error(main): i5 table has 0 elements")
    
    for line in sys.stdin:
        # head of bam file
        if line[0] == '@':
            try:
                print line,
            except IOError:
                try:
                    sys.stdout.close()
                except IOError:
                    pass
                try:
                    sys.stderr.close()
                except IOError:
                    pass
            continue
        
        barcode = line.split()[0].split(':')[0]

        cur_i7 = barcode[:8]
        cur_i5 = barcode[8:16]
        cur_r5 = barcode[16:]

        # skip this read if barcode has mismatch with r5 or r7     
        if cur_i7 not in table_i7:
            (opt_match, num_mm, opt_match2, num_mm2) = min_dist(cur_i7, table_i7)
            if num_mm <= max_mm and abs(num_mm2 - num_mm) > 1: 
                cur_i7 = opt_match
            else:
                continue
           
        if not cur_r5 in table_r5:
           (opt_match, num_mm, opt_match2, num_mm2) = min_dist(cur_r5, table_r5)
           if num_mm <= max_mm and abs(num_mm2 - num_mm) > 1: 
               cur_r5 = opt_match
           else:
               continue
        
        if cur_i5 not in table_i5:
            (opt_match, num_mm, opt_match2, num_mm2) = min_dist(cur_i5, table_i5)
            if num_mm <= max_mm and abs(num_mm2 - num_mm) > 1: 
                cur_i5 = opt_match
            else:
                continue
        
        # new barcode 
        barcode = cur_i7 + cur_i5 + cur_r5
        try:
            print barcode + line[len(barcode):],
        except IOError:
            try:
                sys.stdout.close()
            except IOError:
                pass
            try:
                sys.stderr.close()
            except IOError:
                pass
             
if __name__ == '__main__':
    main()
