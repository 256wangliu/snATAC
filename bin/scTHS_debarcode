#!/opt/python/bin/python

import gzip
import sys
import collections
import os
import operator
import os.path
import optparse

def min_dist(s, sl):
    """ return the string with min edit distance """
    ss = sl[:]
    if len(s) == 0: sys.exit("error(min_dist): inquiry string has length 0")
    if len(ss) == 0: sys.exit("error(min_dist): inquiry string list has 0 elements")
    if ([len(s) == len(sj) for sj in ss].count(False) > 0): sys.exit("error(min_dist): different string length")
    dists = [[a == b for (a,b) in zip(s, sj)].count(False) for sj in ss]
    min_value = min(dists)
    min_index = dists.index(min(dists))
    min_s = ss[min_index]
    # find the 2nd min element in the list
    del dists[min_index]
    del ss[min_index]    

    min_value2 = min(dists)
    min_index2 = dists.index(min(dists))
    min_s2 = ss[min_index2]
    return (min_s, min_value, min_s2, min_value2)


def main():
    parser = optparse.OptionParser(usage='%prog [-h] [-a I1.fastq] [-b I2.fastq] [-c R1.fastq] [-r BARCODE_DIR] [-m MAX_MISMATCH]',
                                   description='Decomplex single-cell ATAC-seq barcode allowing mismatch.')
    parser.add_option('-a',
                      dest="I1",
                      help='I1.fastq.gz'
                      )

    parser.add_option('-b',
                      dest='I2',
                      help='I2.fastq.gz'
                      )

    parser.add_option('-c',
                      dest='R1',
                      help='R1.fastq.gz'
                      )

    parser.add_option('-r',
                      dest='BARCODE_DIR',
                      help='directory contains barcodes r7/i7/i5/r5'
                      )

    parser.add_option('-m',
                      dest='MAX_MISMATCH',
                      type=int,
                      help='max mismatch [2]'
                      )

    parser.add_option('--version',
                      dest="version",
                      default=1.0,
                      type="float",
                      )

    if len(sys.argv) < 10:
        parser.print_help()
        exit('error: too few arguments')

    args = parser.parse_args()[0]

    fi1_name = args.I1
    fi2_name = args.I2
    fr1_name = args.R1
    max_mm = int(args.MAX_MISMATCH)
    dirt = args.BARCODE_DIR
    
    if not os.path.isfile(fi1_name): exit("error: \'%s\' not exist" % fi1_name)
    if not os.path.isfile(fi2_name): exit("error: \'%s\' not exist" % fi2_name)
    if not os.path.isfile(fr1_name): exit("error: \'%s\' not exist" % fr1_name)
    
    fi1 = gzip.open(fi1_name, 'rb')
    fi2 = gzip.open(fi2_name, 'rb')
    fr1 = gzip.open(fr1_name, 'rb')

    """ main function """
    if os.path.isfile(dirt+'/i7_THS'): 
        table_i7 = [x.strip() for x in open(dirt+'/i7_THS').readlines()]
    else:
        sys.exit("error(main): i7_THS file not exists")
    
    if os.path.isfile(dirt+'/i5_THS'): 
        table_i5 = [x.strip() for x in open(dirt+'/i5_THS').readlines()]
    else:
        sys.exit("error(main): i5_THS file not exists")
    
    if os.path.isfile(dirt+'/r5_THS'): 
        table_r5 = [x.strip() for x in open(dirt+'/r5_THS').readlines()]
    else:
        sys.exit("error(main): r5_THS file not exists")
    
    
    if len(table_i7) == 0: sys.exit("error(main): i7 table has 0 elements")
    if len(table_r5) == 0: sys.exit("error(main): r5 table has 0 elements")
    if len(table_i5) == 0: sys.exit("error(main): i5 table has 0 elements")
    
    while True:
        cur_i1_name = fi1.readline().strip()[1:]
        cur_i1_read = fi1.readline().strip()
        cur_i1_plus = fi1.readline().strip()
        cur_i1_qual = fi1.readline().strip()
    
        cur_i2_name = fi2.readline().strip()[1:]
        cur_i2_read = fi2.readline().strip()
        cur_i2_plus = fi2.readline().strip()
        cur_i2_qual = fi2.readline().strip()
    
        cur_r1_name = fr1.readline().strip()[1:]
        cur_r1_read = fr1.readline().strip()
        cur_r1_plus = fr1.readline().strip()
        cur_r1_qual = fr1.readline().strip()
            
        if cur_i1_name == "" or cur_i2_name == "" or cur_r1_name == "": break
        if not (cur_i1_name.split()[0] == cur_i2_name.split()[0] == cur_r1_name.split()[0]): sys.exit("error(main): read name not matched")        
        
        cur_i7 = cur_i1_read[:8]
        cur_i5 = cur_i2_read[:8]
        cur_r5 = cur_i2_read[-9:-3]
        
        cur_barcode = cur_i7 + cur_i5 + cur_r5
        if cur_barcode.count('N') >= 9: continue

        if not cur_r5 in table_r5:
           (opt_match, num_mm, opt_match2, num_mm2) = min_dist(cur_r5, table_r5)
           if num_mm <= max_mm and abs(num_mm2 - num_mm) > 1: 
               cur_r5 = opt_match
           else:
               continue
               
        if cur_i5 not in table_i5:
            (opt_match, num_mm, opt_match2, num_mm2) = min_dist(cur_i5, table_i5)
            if num_mm <= max_mm and abs(num_mm2 - num_mm) > 1: 
                cur_i5 = opt_match
            else:
                continue
        
        if cur_i7 not in table_i7:
            (opt_match, num_mm, opt_match2, num_mm2) = min_dist(cur_i7, table_i7)
            if num_mm <= max_mm and abs(num_mm2 - num_mm) > 1: 
                cur_i7 = opt_match
            else:
                continue
        
        try:
            print '@' + cur_barcode + ':' + cur_r1_name
            print cur_r1_read
            print '+'
            print cur_r1_qual
        except IOError:
            try:
                sys.stdout.close()
            except IOError:
                pass
            try:
                sys.stderr.close()
            except IOError:
                pass
                
    fi1.close()
    fi2.close()
    fr1.close()

if __name__ == '__main__':
    main()
