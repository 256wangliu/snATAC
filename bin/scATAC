#!/bin/bash

# PART I check weather softwares installed
command -v bwa >/dev/null 2>&1 || { echo >&2 "scATAC requires bwa but it is not installed. Aborting."; exit 1; }
command -v samtools >/dev/null 2>&1 || { echo >&2 "scATAC requires samtools but it is not installed. Aborting."; exit 1; }
command -v java >/dev/null 2>&1 || { echo >&2 "scATAC requires java but it is not installed. Aborting."; exit 1; }
command -v scATAC_barcode_err_correct >/dev/null 2>&1 || { echo >&2 "scATAC requires scATAC_barcode_err_correct but it is not installed. Aborting."; exit 1; }
command -v scATAC_decell >/dev/null 2>&1 || { echo >&2 "scATAC requires scATAC_decell but it is not installed. Aborting."; exit 1; }

#scATAC_rm_cell_with_low_cov='/oasis/tscc/scratch/r3fang/collaboration/Seb_04_26_2016/Mixtures_published_download/HL60_GM12878/scATAC_rm_cell_with_low_cov.py'

# PART II usage info
usage(){
cat << EOF

Program: scATAC (dual-barcode single cell ATAC-seq analysis pipeline by Ren Lab)
Version: 06.10.2016
Contact: Rongxin Fang <r3fang@ucsd.edu>
Ren Lab: http://bioinformatics-renlab.ucsd.edu/rentrac/

Step 1. map and filter scATAC reads with poor mappability;
Step 2. correct barcode error by allowing 2 mismatches;
Step 3. split reads to individual cells based on the barcode information;
Step 4. remove PCR duplication for each cell;
Step 6. merge reads from different cells;
Step 7. generate barcode frequency table;
Step 8. filter cells with low reads (less than 500 reads default);

usage: ${0##*/} [-h] [-t THREADS] [-f FASTQ1] [-r FASTQ2] [-b BARCODE_DIR] [-d MAX_BARCODE_MISMATCH][-p MarkDuplicates.jar] [-n PREFIX] [-g BWA_GENOME] [-m MIN_READ] 

Example:
scATAC -t 2 -f demo_R1.fastq.gz -r demo_R2.fastq.gz -b ./barcodes -d 2 -p Picard/MarkDuplicates.jar -n demo -g hg19.fa -m 500 

Options:    
	-h, --help			show this help message and exit.
	-t  THREADS			threads [1].
	-f  FASTQ1			first mate of pair-end sequencing data [.fq/.fastq/.gz].
	-r  FASTQ2			second mate of pair-end sequencing data [.fq/.fastq/.gz].
	-b  BARCODE_DIR			directory that contains r7, i7, i5 and r5 barcode.
	-d  MAX_BARCODE_MISMATCH			max barcode mismatch allowed [2].
	-p  MARK_DUPLICATE  		path to picard MarkDuplicates.jar [MarkDuplicates.jar].
	-n  PREFIX			prefix of output files.
	-g  BWA_GENOME			BWA indexed reference genome.
	-m  MIN_READ			cells with reads less than MIN_READ will be filtered.
EOF
} 

# PART III default params
THREADS=1
MAX_BARCODE_MISMATCH=2

# PART IV receiving arguments
while getopts ":t:f:r:b:d:p:n:g:m:" opt;
do
	case "$opt" in
		t) THREADS=$OPTARG;;
		f) FASTQ1=$OPTARG;;
		r) FASTQ2=$OPTARG;;
		b) BARCODE_DIR=$OPTARG;;
		d) MAX_BARCODE_MISMATCH=$OPTARG;;
		p) MARK_DUPLICATE=$OPTARG;;
		n) PREFIX=$OPTARG;;
		g) GENOME=$OPTARG;;
		m) MIN_READ=$OPTARG;;
		\?) usage
			echo "input error"
			exit 1
			;;
	esac
done

echo 
echo THREADS=$THREADS
echo FASTQ1=$FASTQ1
echo FASTQ2=$FASTQ2
echo BARCODE_DIR=$BARCODE_DIR
echo MAX_BARCODE_MISMATCH=$MAX_BARCODE_MISMATCH
echo MARK_DUPLICATE=$MARK_DUPLICATE
echo PREFIX=$PREFIX
echo GENOME=$GENOME
echo MIN_READ=$MIN_READ
echo 

if [ $# -lt 10 ] ; then
   usage
   echo "error: too few arguments"
   exit 1
fi

# check if files exist
if [ ! -f $FASTQ1 ]; then
	usage
    echo "error: '$FASTQ1' not exists.";
	exit 1
fi

if [ ! -f $FASTQ2 ]; then
	usage
    echo "error: '$FASTQ2' not exists.";
	exit 1
fi

if [ ! -f $MARK_DUPLICATE ]; then
	usage
    echo "error: '$MARK_DUPLICATE' not exists.";
	exit 1
fi


if [ ! -f $GENOME ]; then
	usage
    echo "error: '$GENOME' not exists.";
	exit 1
fi

if [ ! -f $BARCODE_DIR/r7 ]; then
	usage
	echo $BARCODE_DIR/r7
    echo "error: '$BARCODE_DIR/r7' not exists.";
	exit 1
fi

if [ ! -f $BARCODE_DIR/i7 ]; then
	usage
    echo "error: '$BARCODE_DIR/i7' not exists.";
	exit 1
fi

if [ ! -f $BARCODE_DIR/i5 ]; then
	usage
    echo "error: '$BARCODE_DIR/i5' not exists.";
	exit 1
fi

if [ ! -f $BARCODE_DIR/r5 ]; then
	usage
    echo "error: '$BARCODE_DIR/r5' not exists.";
	exit 1
fi

# check if input type
re='^[0-9]+$'
if ! [[ $THREADS =~ $re ]] ; then
   echo "error: '$THREADS' Not a number" >&2;
   exit 1
fi

if ! [[ $MAX_BARCODE_MISMATCH =~ $re ]] ; then
   echo "error: '$MAX_BARCODE_MISMATCH' Not a number" >&2;
   exit 1
fi

if ! [[ $MIN_READ =~ $re ]] ; then
   echo "error: '$MIN_READ' Not a number" >&2;
   exit 1
fi

echo 'Step 1. map and filter reads with poor mappability'
bwa mem -M -t 5 $GENOME $FASTQ1 $FASTQ2 \
| samtools view -q 10 -bS - > $PREFIX.umap.bam

echo 'Step 2. correct barcode allowing mismatches'
samtools view -h $PREFIX.umap.bam \
| scATAC_barcode_err_correct $MAX_BARCODE_MISMATCH $BARCODE_DIR \
| samtools view -bS - > $PREFIX.umap.corrected.bam

echo 'Step 3. sort reads based on name'
samtools sort -n -m 1G $PREFIX.umap.corrected.bam $PREFIX.umap.corrected.nsorted

echo 'Step 4. split reads into each cell' 
rm -r $PREFIX\_TMP # remove folder by force
mkdir $PREFIX\_TMP # create a tmp folder
samtools view $PREFIX.umap.corrected.nsorted.bam \
| scATAC_decell $PREFIX\_TMP -

echo 'Step 5. remove PCR duplication for each cell'
samtools view -H $PREFIX.umap.corrected.nsorted.bam > $PREFIX.umap.corrected.nsorted.header
for line in `ls $PREFIX\_TMP | grep .sam`
do
	barcode="${line%.*}"
	cat $PREFIX.umap.corrected.nsorted.header $PREFIX\_TMP/$line \
	| samtools view -bS - \
	| samtools sort - $PREFIX\_TMP/$barcode.sorted \
	| java -Xmx2G -jar $MARK_DUPLICATE INPUT=$PREFIX\_TMP/$barcode.sorted.bam OUTPUT=$PREFIX\_TMP/$barcode.sorted.filtered.bam ASSUME_SORTED=true \
		REMOVE_DUPLICATES=true VALIDATION_STRINGENCY=LENIENT METRICS_FILE=$PREFIX\_TMP/metrics.$barcode.txt TMP_DIR=$PREFIX\_TMP/$barcode\_tmp
done

echo 'Step 6. merge cells'
samtools cat -o $PREFIX.umap.corrected.nsorted.nodup.bam $PREFIX\_TMP/*.sorted.filtered.bam

echo 'Step 7. remove intermedia files/folders'
rm $PREFIX.umap.2mm.nsorted.header
rm -r $PREFIX\_TMP/

echo 'Step 8. sort by genomic coordinates'
samtools sort -m 1G $PREFIX.umap.corrected.nsorted.nodup.bam $PREFIX.umap.corrected.nsorted.nodup.gsorted

echo 'Step 9. generate barcode frequency'
samtools view $PREFIX.umap.corrected.nsorted.nodup.gsorted.bam \
| awk '{split($1,a,":"); print a[1]}' | sort | uniq -c | awk '{print $2, $1}' \
| sort -k2rn - > $PREFIX.umap.corrected.nsorted.nodup.gsorted.stat 

#echo 'Step 10. filter cells with low reads (less than 500 reads)'
#samtools view -h $PREFIX.umap.2mm.nsorted.nodup.gsorted.bam \
#| python $scATAC_rm_cell_with_low_cov 500 $PREFIX.umap.2mm.nsorted.nodup.gsorted.stat - \
#| samtools view -bS - > $PREFIX.umap.2mm.nsorted.nodup.gsorted.filtered.bam
#
##echo 'Step 11. convert bam file to bigwig for visualization'
##bamToBed -i $PREFIX.umap.2mm.nsorted.nodup.gsorted.bam \
##| slopBed -s -l 0 -r 300 -i stdin -g hg19.genome \
##| genomeCoverageBed -g hg19.genome -i stdin -bg \
##| wigToBigWig stdin hg19.genome SRR1947693.umap.2mm.nsorted.uniq.filtered.gsorted.bw
#