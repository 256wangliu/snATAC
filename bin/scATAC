#!/usr/bin/env bash

# PART I check weather softwares installed
command -v bwa >/dev/null 2>&1 || { echo >&2 "scATAC requires bwa but it is not installed. Aborting."; exit 1; }
command -v samtools >/dev/null 2>&1 || { echo >&2 "scATAC requires samtools but it is not installed. Aborting."; exit 1; }
command -v java >/dev/null 2>&1 || { echo >&2 "scATAC requires java but it is not installed. Aborting."; exit 1; }
command -v scATAC_barcode_err_correct >/dev/null 2>&1 || { echo >&2 "scATAC requires scATAC_barcode_err_correct but it is not installed. Aborting."; exit 1; }
command -v scATAC_decell >/dev/null 2>&1 || { echo >&2 "scATAC requires scATAC_decell but it is not installed. Aborting."; exit 1; }
command -v scATAC_rm_cell_with_low_cov >/dev/null 2>&1 || { echo >&2 "scATAC requires scATAC_rm_cell_with_low_cov but it is not installed. Aborting."; exit 1; }
command -v scATAC_debarcode >/dev/null 2>&1 || { echo >&2 "scATAC requires scATAC_debarcode but it is not installed. Aborting."; exit 1; }

# PART II usage info
usage(){
cat << EOF

Program: scATAC (dual-barcode single cell ATAC-seq analysis pipeline by Ren Lab)
Version: 06.10.2016
Contact: Rongxin Fang <r3fang@ucsd.edu>
Ren Lab: http://bioinformatics-renlab.ucsd.edu/rentrac/

Step 0. decomplex scATAC-seq data [OPTIONA];
Step 1. map and filter poorly mapped reads;
Step 2. correct barcode error by allowing given number of mismatches;
Step 3. split reads to individual cells based on the barcode combination;
Step 4. remove PCR duplication for each cell;
Step 6. merge reads from different cells;
Step 7. generate barcode frequency table;
Step 8. filter cells with reads counts less than given cutoff;
Step 9. summerize and generate a log file;

usage: ${0##*/} [-h] [-t THREADS] [-f R1] [-r R2] [-b BARCODE_DIR] [-d MAX_BARCODE_MISMATCH] [-p MarkDuplicates.jar] [-n PREFIX] [-g BWA_GENOME] [-m MIN_READ]  

Example:
scATAC -t 2 -f demo_R1.fastq.gz -r demo_R2.fastq.gz -b ./barcodes -d 2 -p Picard/MarkDuplicates.jar -n demo -g hg19.fa -m 500 

Options:    
	-h, --help                  show this help message and exit.
	-t  THREADS                 threads [1].
	-f  R1                      fastq.gz file that contains forward reads (only fastq.gz allowed).
	-r  R2                      fastq.gz file that contains reverse reads (only fastq.gz allowed).
	-b  BARCODE_DIR             folder that contains r7_ATAC, i7_ATAC, i5_ATAC and r5_ATAC barcode.
	-d  MAX_BARCODE_MISMATCH    max barcode mismatch allowed for barcode error correction [2].
	-p  MARK_DUPLICATE          path to picard MarkDuplicates.jar [MarkDuplicates.jar].
	-n  PREFIX                  prefix of output files.
	-g  BWA_GENOME              BWA indexed reference genome.
	-m  MIN_READ                cells with reads less than MIN_READ will be filtered.

Note: To use scATAC, you need to first decomplex barcode combination and integrate barcode 
      information as the beginning of the read name in R1 and R2 files. 
      This can be done by command 'scATAC_debarcode': 
      'scATAC_debarcode -a I1.fastq.gz -b I2.fastq.gz -c R1.fastq.gz | gzip - > R1.decomplex.fastq.gz'
      'scATAC_debarcode -a I1.fastq.gz -b I2.fastq.gz -c R2.fastq.gz | gzip - > R2.decomplex.fastq.gz' 
EOF
} 

# PART III default params
THREADS=1

# PART IV receiving arguments
while getopts ":t:f:r:b:d:p:n:g:m:" opt;
do
	case "$opt" in
		t) THREADS=$OPTARG;;
		f) R1=$OPTARG;;
		r) R2=$OPTARG;;
		b) BARCODE_DIR=$OPTARG;;
		d) MAX_BARCODE_MISMATCH=$OPTARG;;
		p) MARK_DUPLICATE=$OPTARG;;
		n) PREFIX=$OPTARG;;
		g) GENOME=$OPTARG;;
		m) MIN_READ=$OPTARG;;
		\?) usage
			echo "input error"
			exit 1
			;;
	esac
done

if [ $# -lt 10 ] ; then
   usage
   echo "error: too few arguments"
   exit 1
fi

# check if files exist
if [ ! -f $R1 ]; then
	usage
    echo "error: '$R1' not exists.";
	exit 1
fi

if [ ! -f $R2 ]; then
	usage
    echo "error: '$R2' not exists.";
	exit 1
fi

if [ ! -f $MARK_DUPLICATE ]; then
	usage
    echo "error: '$MARK_DUPLICATE' not exists.";
	exit 1
fi

if [ ! -f $GENOME ]; then
	usage
    echo "error: '$GENOME' not exists.";
	exit 1
fi

if [ ! -f $BARCODE_DIR/r7_ATAC ]; then
	usage
    echo "error: '$BARCODE_DIR/r7_ATAC' not exists.";
	exit 1
fi

if [ ! -f $BARCODE_DIR/i7_ATAC ]; then
	usage
    echo "error: '$BARCODE_DIR/i7_ATAC' not exists.";
	exit 1
fi

if [ ! -f $BARCODE_DIR/i5_ATAC ]; then
	usage
    echo "error: '$BARCODE_DIR/i5_ATAC' not exists.";
	exit 1
fi

if [ ! -f $BARCODE_DIR/r5_ATAC ]; then
	usage
    echo "error: '$BARCODE_DIR/r5_ATAC' not exists.";
	exit 1
fi

# check if input type
re='^[0-9]+$'
if ! [[ $THREADS =~ $re ]] ; then
   echo "error: '$THREADS' Not a number" >&2;
   exit 1
fi

if ! [[ $MAX_BARCODE_MISMATCH =~ $re ]] ; then
   echo "error: '$MAX_BARCODE_MISMATCH' Not a number" >&2;
   exit 1
fi

if ! [[ $MIN_READ =~ $re ]] ; then
   echo "error: '$MIN_READ' Not a number" >&2;
   exit 1
fi

echo $0 $*
echo 
echo THREADS=$THREADS
echo R1=$R1
echo R2=$R2
echo BARCODE_DIR=$BARCODE_DIR
echo MAX_BARCODE_MISMATCH=$MAX_BARCODE_MISMATCH
echo MARK_DUPLICATE=$MARK_DUPLICATE
echo PREFIX=$PREFIX
echo GENOME=$GENOME
echo MIN_READ=$MIN_READ
echo 

if [ -d $PREFIX\_tmp ]; then
	rm -r $PREFIX\_tmp
fi
mkdir $PREFIX\_tmp

echo 'Step 1. map and filter poorly mapped reads;'
bwa mem -M -t $THREADS $GENOME $R1 $R2 \
| samtools view -q 10 -bS - > $PREFIX\_tmp/$PREFIX.umap.bam

echo 'Step 2. correct barcode error by allowing given mismatches;'
samtools view -h $PREFIX\_tmp/$PREFIX.umap.bam \
| scATAC_barcode_err_correct $MAX_BARCODE_MISMATCH $BARCODE_DIR \
| samtools view -bS - > $PREFIX\_tmp/$PREFIX.umap.corrected.bam

echo 'Step 3. sort reads based on barcode in prepare for reads split;'
samtools sort -n -m 1G $PREFIX\_tmp/$PREFIX.umap.corrected.bam $PREFIX\_tmp/$PREFIX.umap.corrected.nsorted

echo 'Step 4. split reads to individual cells based on the barcode combination;' 
if [ -d $PREFIX\_tmp/cells ]; then
	rm -r $PREFIX\_tmp/cells
fi
mkdir $PREFIX\_tmp/cells # create a tmp folder
samtools view $PREFIX\_tmp/$PREFIX.umap.corrected.nsorted.bam \
| scATAC_decell $MIN_READ $PREFIX\_tmp/cells -

samtools view -H $PREFIX\_tmp/$PREFIX.umap.corrected.nsorted.bam > $PREFIX\_tmp/$PREFIX.umap.corrected.nsorted.header
cat $PREFIX\_tmp/$PREFIX.umap.corrected.nsorted.header $PREFIX\_tmp/cells/*.sam | samtools view -bS - > $PREFIX\_tmp/$PREFIX.umap.corrected.nsorted.bam

echo 'Step 5. remove PCR duplication for each cell;'
for line in `ls $PREFIX\_tmp/cells | grep .sam`
do
	barcode="${line%.*}"
	cat $PREFIX\_tmp/$PREFIX.umap.corrected.nsorted.header $PREFIX\_tmp/cells/$line | samtools view -bS - \
	| samtools sort - $PREFIX\_tmp/cells/$barcode.sorted
	java -Xmx2G -jar $MARK_DUPLICATE INPUT=$PREFIX\_tmp/cells/$barcode.sorted.bam OUTPUT=$PREFIX\_tmp/cells/$barcode.sorted.filtered.bam ASSUME_SORTED=true \
		REMOVE_DUPLICATES=true VALIDATION_STRINGENCY=LENIENT METRICS_FILE=$PREFIX\_tmp/cells/metrics.$barcode.txt TMP_DIR=$PREFIX\_tmp/cells/$barcode\_tmp
	rm $PREFIX\_tmp/cells/$barcode.sorted.bam
	rm -r $PREFIX\_tmp/cells/$barcode\_tmp
done

echo 'Step 6. merge reads from different cells to a single file;'
samtools cat -o $PREFIX\_tmp/$PREFIX.umap.corrected.nsorted.nodup.bam $PREFIX\_tmp/cells/*.sorted.filtered.bam

echo 'Step 7. generate barcode frequency;'
samtools view $PREFIX\_tmp/$PREFIX.umap.corrected.nsorted.nodup.bam \
| awk '{split($1,a,":"); print a[1]}' | sort | uniq -c | awk '{print $2, $1}' \
| sort -k2rn - > $PREFIX\_tmp/$PREFIX.umap.corrected.nsorted.nodup.stat 

echo 'Step 8. filter cells with low reads less than given number of reads;'
samtools view -h $PREFIX\_tmp/$PREFIX.umap.corrected.nsorted.nodup.bam \
| scATAC_rm_cell_with_low_cov $MIN_READ $PREFIX\_tmp/$PREFIX.umap.corrected.nsorted.nodup.stat - \
| samtools view -bS - > $PREFIX\_tmp/$PREFIX.umap.corrected.nsorted.nodup.filtered.bam

echo 'Step 9. sort by genomic coordinates'
samtools sort -m 1G $PREFIX\_tmp/$PREFIX.umap.corrected.nsorted.nodup.filtered.bam $PREFIX\_tmp/$PREFIX.umap.corrected.nsorted.nodup.filtered.gsorted

echo 'Step 10. summerize'
TOTAL_READS=$(zcat $R1 | wc -l | awk '{print $1}')
UNIQ_READS=$(samtools view $PREFIX\_tmp/$PREFIX.umap.bam | wc -l | awk '{print $1}')
BARCODE_CORRECTED_READS=$(samtools view $PREFIX\_tmp/$PREFIX.umap.corrected.bam | wc -l | awk '{print $1}')
BEFORE_PICARD_READS=$(samtools view $PREFIX\_tmp/$PREFIX.umap.corrected.nsorted.bam | wc -l | awk '{print $1}')
AFTER_PICARD_READS=$(samtools view $PREFIX\_tmp/$PREFIX.umap.corrected.nsorted.nodup.bam | wc -l | awk '{print $1}')
TOTAL_CELLS=$(awk -v cutoff="$MIN_READ" '{if ($2 > cutoff) print }' $PREFIX\_tmp/$PREFIX.umap.corrected.nsorted.nodup.stat | wc -l | awk '{print $1}')
FINAL_READS=$(samtools view $PREFIX\_tmp/$PREFIX.umap.corrected.nsorted.nodup.filtered.gsorted.bam | wc -l | awk '{print $1}')
TOTAL_BARCODE=$(samtools view $PREFIX\_tmp/$PREFIX.umap.corrected.bam | awk '{split($1,a,":"); print a[1]}' | sort | uniq -c | wc -l | awk '{print $1}')

echo 'Step 10. clean up'
echo "================================ Summary =================================="
echo "Total number of raw reads: $((TOTAL_READS/2))"
echo "Uniquely mapped reads (MAPQ>10): $UNIQ_READS"
echo "Reads left after barcode correction: $BARCODE_CORRECTED_READS"
echo "Uniquely barcode combinations: $TOTAL_BARCODE"
echo "Estimated PCR duplication rate: $(echo "scale=2; ($BEFORE_PICARD_READS - $AFTER_PICARD_READS) / $BEFORE_PICARD_READS * 100"| bc -l)%"
echo "Total number of reads left: $FINAL_READS"
echo "Number of cells with more than $MIN_READ reads: $TOTAL_CELLS"

sort -k2,2n $PREFIX\_tmp/$PREFIX.umap.corrected.nsorted.nodup.stat \
| awk -v cutoff="$MIN_READ" '{if ($2 > cutoff) print $2}' \
| awk '
function max(x){i=0;for(val in x){if(i<=x[val]){i=x[val];}}return i;}
function min(x){i=max(x);for(val in x){if(i>x[val]){i=x[val];}}return i;}
{
     a[x++]=$1
     b[$1]++
}
END{
	print "Min number of reads for selected cells: "min(a)
    print "Median number of reads for selected cells: "a[int((x-1)/2)] 
    print "Max number of reads for selected cells: "max(a)
}'

mv $PREFIX\_tmp/$PREFIX.umap.corrected.nsorted.nodup.filtered.gsorted.bam $PREFIX.bam
rm -r $PREFIX\_tmp
